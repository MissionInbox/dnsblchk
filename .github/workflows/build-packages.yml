name: Build Packages

on:
  push:
    branches: [ main ]
  pull_request:

concurrency:
  group: build-packages-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
    outputs:
      python-version: ${{ steps.pyver.outputs.python_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Show Python version
        id: pyver
        run: |
          echo "python_version=$(python -V)" >> $GITHUB_OUTPUT
      - name: Verify module availability
        run: |
          python - <<'PY'
          import sys, os, glob
          print('Working directory:', os.getcwd())
          print('sys.path:', sys.path)
          print('Top-level .py files:', glob.glob('*.py'))
          try:
              import logger
              print('logger module file:', logger.__file__)
          except Exception as e:
              print('Failed to import logger:', e)
              raise
          PY
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Ensure modern packaging stack to avoid canonicalize_version errors
          pip install --upgrade setuptools packaging wheel build
          pip install pytest
      - name: Run tests
        run: |
          python -m pytest -q || python -m pytest -vv
      - name: Upload logs (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
            name: test-logs
            path: logs/
            if-no-files-found: ignore
            retention-days: 7

  build-rpm:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [rockylinux:9, almalinux:9, fedora:latest]
    container:
      image: ${{ matrix.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install build dependencies
        run: |
          set -e
          if command -v dnf >/dev/null 2>&1; then
            PM=dnf
          else
            PM=yum
          fi
          # Base packages required to build a Python RPM
          $PM -y install rpm-build python3 python3-devel python3-pip python3-setuptools shadow-utils systemd || {
            echo "Base package install failed"; exit 1;
          }
          # Upgrade packaging tools (include packaging & build to fix canonicalize_version mismatch)
          pip3 install --upgrade pip setuptools packaging wheel build
      - name: Create RPM build environment
        run: |
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
      - name: Create source distribution
        run: |
          python3 -m build --sdist
          ls -l dist
      - name: Copy source distribution to SOURCES
        run: |
          cp dist/dnsblchk-*.tar.gz ~/rpmbuild/SOURCES/
      - name: Capture version
        id: version
        run: |
          VERSION=$(python -c "import tomllib; data = tomllib.load(open('pyproject.toml','rb')); print(data['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Create .spec file
        run: |
          VERSION=${{ steps.version.outputs.version }}
          cp dnsblchk.spec ~/rpmbuild/SPECS/dnsblchk.spec
          sed -i "s/@VERSION@/${VERSION}/g" ~/rpmbuild/SPECS/dnsblchk.spec
      - name: Build RPM
        run: |
          rpmbuild -ba ~/rpmbuild/SPECS/dnsblchk.spec
          echo "Built RPMs:" && ls -1 ~/rpmbuild/RPMS/noarch || true
      - name: Sanitize image name
        id: img
        run: |
          IMAGE="${{ matrix.image }}"
          SAFE="${IMAGE//:/-}"
          echo "safe_image=$SAFE" >> $GITHUB_OUTPUT
      - name: Upload RPM artifact
        uses: actions/upload-artifact@v4
        with:
          name: rpm-package-${{ steps.img.outputs.safe_image }}
          path: ~/rpmbuild/RPMS/noarch/dnsblchk-*.rpm

  build-deb:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install build tools
        run: |
          sudo apt update
          sudo apt install -y build-essential debhelper dh-python python3-all python3-setuptools python3-pip fakeroot
          python -m pip install --upgrade pip setuptools packaging wheel build
      - name: Prepare debian metadata
        run: |
          VERSION=$(python -c "import tomllib; data = tomllib.load(open('pyproject.toml','rb')); print(data['project']['version'])")
          echo "Detected version: $VERSION"
          mkdir -p debian
          cat > debian/control <<'EOF'
          Source: dnsblchk
          Section: utils
          Priority: optional
          Maintainer: DNSBL Checker <contact@example.com>
          Build-Depends: debhelper-compat (= 13), python3, python3-setuptools, dh-python
          Standards-Version: 4.6.0
          Homepage: https://github.com/example/dnsblchk

          Package: dnsblchk
          Architecture: all
          Depends: ${python3:Depends}, ${misc:Depends}
          Description: DNS Blacklist Checker service
           Monitors IPs against DNSBLs and can email alerts.
          EOF
          cat > debian/rules <<'EOF'
          #!/usr/bin/make -f
          %:
          	dh $@ --with python3 --buildsystem=pybuild
          EOF
          chmod +x debian/rules
          cat > debian/install <<'EOF'
          dnsblchk.service usr/lib/systemd/system/
          config/config.yaml.template etc/dnsblchk/config.yaml
          EOF
          cat > debian/changelog <<EOF
          dnsblchk ($VERSION-1) unstable; urgency=medium
            * Automated build.
           -- DNSBL Checker <contact@example.com>  $(date -u '+%a, %d %b %Y %H:%M:%S +0000')
          EOF
      - name: Build DEB package
        run: |
          dpkg-buildpackage -us -uc -b
      - name: Collect DEB artifact
        run: |
          mkdir -p deb-artifacts
          cp ../dnsblchk_*_all.deb deb-artifacts/ 2>/dev/null || true
          cp ../dnsblchk_*_amd64.deb deb-artifacts/ 2>/dev/null || true
          ls -l deb-artifacts || true
      - name: Upload DEB artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-package
          path: deb-artifacts/*.deb
